'use strict';

var _extend = require('./../npm/extend/index.js');

var _extend2 = _interopRequireDefault(_extend);

var _util = require('./util.js');

var _util2 = _interopRequireDefault(_util);

var _defer = require('./defer.js');

var _defer2 = _interopRequireDefault(_defer);

var _request = require('./request.js');

var _request2 = _interopRequireDefault(_request);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Page = function _Page(config) {
  var defaultConfig = {
    url: '',
    limit: 10,
    offset: 0
  };

  (0, _extend2.default)(true, defaultConfig, config || {});

  this._defaultConfig = (0, _extend2.default)({}, defaultConfig);
  this._config = (0, _extend2.default)({}, defaultConfig);
  this._data = [];
  this._totalRecord = false;

  this._hasFirstRquest = false;
};

_Page.prototype.init = function () {
  return this.reset();
};

_Page.prototype.nullDeferred = function () {
  var deferred = (0, _defer2.default)();
  setTimeout(function () {
    deferred.reject();
  });
  return deferred.promise;
};

_Page.prototype.reset = function (config) {
  if (this.requesting) {
    return this.nullDeferred();
  }

  this._config = (0, _extend2.default)({}, this._defaultConfig);
  this._config = (0, _extend2.default)(this._config, config || {});
  this._data = [];
  this._totalRecord = false;
  this._nextKey = null;
  return this.update();
};
_Page.prototype.update = function () {
  if (this.requesting) {
    return this.nullDeferred();
  }

  var _this = this;
  var deferred = (0, _defer2.default)();

  this.requesting = true;

  if (_this._nextKey) {
    this._config.nextKey = _this._nextKey;
  }

  _request2.default.get(_this._config.url, _this._config).then(function (data) {
    _this._hasFirstRquest = true;

    if (data.result && data.result.nextKey) {
      _this._nextKey = data.result.nextKey;
    }

    if (!data.result) {
      data.result = {
        content: [],
        totalRecord: 0
      };
    }

    _this._totalRecord = data.result.list ? false : data.result.totalRecord || 0;
    _this._data = _this._data.concat(data.result.list || data.result.content || []);

    // 去重
    // _this.duplicateDetection();

    // if (_this._config.offset > _this._totalRecord) {
    // _this._totalRecord = false;
    // }
    setTimeout(function () {
      _this.requesting = false;
    }, 300);

    // 保存当前请求的信息
    _this.currentData = data;

    deferred.resolve(_this._data);
  }, function (data) {
    _this._hasFirstRquest = true;

    setTimeout(function () {
      _this.requesting = false;
    }, 300);

    _this._totalRecord = 0;

    deferred.reject(data);
  });

  return deferred.promise;
};

_Page.prototype.getCurrentData = function () {
  return this.currentData;
};

_Page.prototype.duplicateDetection = function () {
  var data = this._data;
  var nData = [];
  var keys = [];

  _util2.default.each(data, function (value, key) {
    if (!value.id && !value.msgId) {
      nData.push(value);
    } else {
      if (value.id && keys.indexOf(value.id) === -1) {
        nData.push(value);
        keys.push(value.id);
      } else if (value.msgId && keys.indexOf(value.msgId) === -1) {
        nData.push(value);
        keys.push(value.msgId);
      }
    }
  });

  this._data = nData;
};

_Page.prototype.next = function (config) {
  var _this = this;

  if (this.requesting) {
    return this.nullDeferred();
  }

  if (!this.hasNext()) {
    // return this.nullDeferred();
    return null;
  }

  if (_this._hasFirstRquest) {
    this._config.offset += this._config.limit;
  }

  _this._config = (0, _extend2.default)(this._config, config || {});
  return this.update();
};

_Page.prototype.isLast = function () {
  if (this._nextKey === 'NONE') {
    return true;
  }
  if (this._totalRecord === false) {
    return false;
  }
  if (this._totalRecord <= this._data.length) {
    return true;
  }

  return false;
};

_Page.prototype.hasNext = function () {
  if (this.requesting) {
    return false;
  }

  if (this._nextKey === 'NONE') {
    return false;
  }
  if (this._totalRecord === false) {
    return true;
  }

  if (this._totalRecord <= this._data.length) {
    return false;
  }

  return true;
};

module.exports = {
  Page: function Page(config) {
    return new _Page(config);
  }

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,