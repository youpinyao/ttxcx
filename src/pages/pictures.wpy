<style lang="scss"
  scoped>
  @import '../scss/_theme.scss';
  @import '../scss/_form.scss';
  .button {
    width: 300rpx;
    height: 80rpx;
    line-height: 80rpx;
    font-size: 32rpx;
    text-align: center;
    background-color: $orange;
    border-radius: 80rpx;
    position: fixed;
    color: $white;
    left: 0;
    right: 0;
    bottom: 50rpx;
    margin: auto;
  }

  .button-back {
    width: 76rpx;
    height: 76rpx;
    background-color: $orange;
    border-radius: 76rpx;
    position: fixed;
    left: 60rpx;
    bottom: 50rpx;
    image {
      width: 46rpx;
      height: 46rpx;
      margin: 15rpx 0 0 15rpx;
    }
  }

  .space {
    height: 180rpx;
  }

  .list {
    .item-title {
      line-height: 40rpx;
      font-size: 24rpx;
      color: $white;
      padding-left: 30rpx;
      padding-top: 10rpx;
    }
    .item-content {
      border-top: 1px solid $bordercolor;
      border-bottom: 1px solid $bordercolor;
      background-color: $blackBar;
      padding: 15rpx 6rpx 10rpx 6rpx;
      @include clearfix();
      .item {
        position: relative;
        margin: 5rpx 5rpx 10rpx 5rpx;
        width: 176rpx;
        height: 176rpx;
        float: left;
        > image {
          vertical-align: top;
          width: 100%;
          height: 100%;
        }
        .check {
          position: absolute;
          right: 10rpx;
          top: 10rpx;
          width: 30rpx;
          height: 30rpx;
          image {
            position: absolute;
            width: 100%;
            height: 100%;
            left: 0;
            top: 0;
          }
        }
      }
    }
  }

  .download-modal-mask {
    position: fixed;
    width: 100%;
    height: 100%;
    z-index: 10;
    left: 0;
    top: 0;
    background-color: rgba($blackBg, 0.4);
  }

  .download-modal {
    width: 550rpx;
    border-radius: 10rpx;
    background-color: $white;
    position: fixed;
    z-index: 11;
    left: 0;
    right: 0;
    top: 30%;
    margin: auto;
    .content {
      padding: 30px 30px;
      text-align: center;
      font-size: 28rpx;
      color: $c3;
    }
    .button {
      margin: 0 auto;
      position: static;
      margin-bottom: 30rpx;
    }
  }

</style>
<template lang="wxml">
  <null-list wx:if="{{pictureList.length <= 0}}">暂无数据</null-list>

  <view style="height: 10rpx"
    hidden="{{!challengeId}}"></view>

  <view class="list"
    wx:for="{{pictureList}}"
    wx:key="index"
    wx:if="{{pictureList.length > 0}}">
    <view class="item-title"
      hidden="{{item.title === false}}">{{item.title}}</view>
    <view class="item-content">
      <view class="item"
        @tap="selectItem({{item.id}})"
        wx:for="{{item.items}}"
        wx:key="index">
        <image src="{{item.small}}"></image>
        <view class="check"
          hidden="{{status === 'view'}}">
          <image src="../images/icon-check.png"
            hidden="{{item.checked !== true}}"></image>
          <image src="../images/icon-uncheck.png"
            hidden="{{item.checked === true}}"></image>
        </view>
      </view>
    </view>
  </view>
  <view class="space"></view>
  <view class="button"
    @tap="setStatus('save')"
    wx:if="{{status === 'view'}}">下载照片</view>
  <view class="button"
    @tap="saveToPhoto"
    wx:if="{{status === 'save'}}">保存至相册</view>

  <view class="button-back"
    @tap="setStatus('view')"
    wx:if="{{status === 'save'}}">
    <image src="../images/icon-arrow-back.png"></image>
  </view>

  <view class="download-modal-mask"
    hidden="{{showDownloadModal !== true}}"></view>
  <view class="download-modal"
    hidden="{{showDownloadModal !== true}}">
    <view class="content">下载中（{{downloadCount}}/{{downloadLen}}）</view>
    <view class="button"
      @tap="cancelDownload">取消</view>
  </view>

  <toast/>
</template>

<script>
  import wepy from 'wepy';
  import nullList from '../components/nullList';
  import request from '../services/request.js';
  import urls from '../services/urls.js';
  import pageService from '../services/page.js';
  import loading from '../services/loading.js';
  import Toast from 'wepy-com-toast';

  export default class Pictures extends wepy.page {
    config = {
      navigationBarTitleText: '塔拓',
      enablePullDownRefresh: true,
    }

    onPullDownRefresh() {
      this.methods.doRefresh();
    }

    onReachBottom() {
      this.methods.loadMore();
    }

    components = {
      'null-list': nullList,
      'toast': Toast,
    }

    data = {
      status: 'view',
      pictureList: [],
      showDownloadModal: false,
      downloadLen: 0,
      downloadCount: 0,
    }

    computed = {

    }

    methods = {
      previewImage: (itemId) => {
        let current = null;
        const urls = [];

        this.pictureList.forEach(list => {
          list.items.forEach(item => {
            if (item.id === itemId) {
              current = item.natural;
            }
            urls.push(item.natural);
          });
        });

        wepy.previewImage({
          current, // 当前显示图片的http链接
          urls, // 需要预览的图片http链接列表
        })
      },
      selectItem: (itemId) => {
        if (this.status !== 'save') {
          this.methods.previewImage(itemId);
          return;
        }
        this.pictureList.forEach(list => {
          list.items.forEach(item => {
            if (item.id === itemId) {
              item.checked = !item.checked;
            }
          });
        });
        this.$apply();
      },
      saveToPhoto: () => {
        const selected = [];

        this.pictureList.forEach(list => {
          list.items.forEach(item => {
            if (item.checked === true) {
              selected.push(item.natural);
            }
          });
        });

        if (!selected.length) {
          this.$invoke('toast', 'show', {
            title: '请勾选照片'
          });
          return false;
        }

        this.methods.doDownload(selected);

        return true;
      },
      unselectedAll: () => {
        this.pictureList.forEach(list => {
          list.items.forEach(item => {
            item.checked = false;
          });
        });
        this.$apply();
      },
      cancelDownload: () => {
        wepy.showModal({
          content: `成功下载${this.downloadCount}张图片`,
          showCancel: false,
          confirmText: '知道了',
        });
        this.methods.unselectedAll();
        this.showDownloadModal = false;
        this.$apply();
      },
      doDownload: (urls) => {
        this.downloadLen = urls.length;
        this.downloadCount = 0;
        this.showDownloadModal = true;
        this.$apply();

        eachUrls.call(this);

        function eachUrls() {
          download(urls[this.downloadCount], (isSuccess, res) => {
            if (isSuccess === true && this.showDownloadModal === true) {
              this.downloadCount++;
              if (this.downloadCount >= this.downloadLen) {
                this.methods.unselectedAll();
                this.showDownloadModal = false;
                this.$apply();
                wepy.showModal({
                  content: `成功下载${this.downloadCount}张图片`,
                  showCancel: false,
                  confirmText: '知道了',
                })
                return;
              }
              this.$apply();
              eachUrls.call(this);
            } else {
              wepy.showModal({
                content: this.methods.convertError(res),
                showCancel: false,
                confirmText: '知道了',
                success: (res) => {
                  wepy.showModal({
                    content: `成功下载${this.downloadCount}张图片`,
                    showCancel: false,
                    confirmText: '知道了',
                  });
                },
              });
              this.methods.unselectedAll();
              this.showDownloadModal = false;
              this.$apply();
            }
          });
        }

        function download(url, callback) {
          wepy.downloadFile({
            url,
            success: (res) => {
              const filePath = res.tempFilePath;

              wepy.saveImageToPhotosAlbum({
                filePath,
                success: (res) => {
                  callback(true);
                },
                fail: (res) => {
                  callback(false, res);
                },
                complete: () => {

                }
              })
            },
            fail: (res) => {
              callback(false, res);
            },
            complete: () => {

            }
          })
        }
      },
      convertError: (err) => {
        if (/cancel/g.test(err.errMsg)) {
          return '取消下载';
        }
        return err.errMsg;
      },
      setStatus: (status) => {
        this.status = status;
      },
      getChallengePictures: () => {
        request.get(urls.picturesData, {
          challengeId: this.challengeId,
        }).then(data => {
          this.pictureList = [{
            title: false,
            items: data.result.list,
          }];
          this.$apply();
          loading.hide();
        });
      },
      doRefresh: () => {
        console.log('doRefresh');
        var promise = this.picturesPage.reset();
        promise && promise.then((data) => {
          this.pictureList = data;
          this.$apply();

          wepy.stopPullDownRefresh();
          loading.hide();
        }, () => {
          wepy.stopPullDownRefresh();
          loading.hide();
        });
      },
      loadMore: () => {
        console.log('doInfinite');
        var promise = this.picturesPage.next();

        if (promise) {
          loading.show();
        }

        promise && promise.then((data) => {
          this.pictureList = data;
          this.$apply();
          loading.hide();
        }, () => {
          loading.hide();
        });
      }
    }

    events = {

    }

    onShow() {

    }

    onLoad(options) {
      this.challengeId = options.id;
      console.log('pictures on load', options);

      this.picturesPage = pageService.Page({
        url: urls.picturesDataOfMy
      });

      loading.show();

      request.getUserInfo().then(d => {
        this.userInfo = d;

        if (this.challengeId) {
          this.methods.getChallengePictures();
        } else {
          this.methods.doRefresh();
        }
      });
    }
  }

</script>
